{"version":3,"sources":["webpack://jakezien/./src/components/postFooterNav.js","webpack://jakezien/./src/templates/work-post.js"],"names":["StyledNav","styled","props","theme","bg2","StyledUl","bg4","rhythm","StyledLi","pageContext","previous","next","Link","className","to","fields","slug","rel","frontmatter","title","data","location","post","mdx","siteTitle","site","siteMetadata","imgNodes","allFile","nodes","coverImage","filter","node","name","includes","childImageSharp","description","excerpt","G","image","gatsbyImageData","alt","style","maxHeight","MDXRenderer","images","body"],"mappings":"4PAMMA,EAAYC,yBAAH,oEAAGA,CAAH,qBAEC,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAW/BC,GARWJ,yBAAH,mEAAGA,CAAH,+EACE,SAAAC,GAAK,OAAIA,EAAMC,MAAMG,OAIlBC,QAAO,IAGTN,wBAAH,mEAAGA,CAAH,+EASRO,EAAWP,wBAAH,mEAAGA,CAAH,2DAqCd,EA/BsB,SAAC,GAAmB,IAAlBQ,EAAiB,EAAjBA,YAEdC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KAElB,OAEE,gBAACX,EAAD,KACE,gBAAC,KAAD,KAEA,gBAACK,EAAD,KACE,0BACGK,GACC,gBAAC,EAAAE,KAAD,CAAMC,UAAU,OAAOC,GAAIJ,EAASK,OAAOC,KAAMC,IAAI,QAArD,KACKP,EAASQ,YAAYC,QAI9B,gBAACX,EAAD,KAAU,gBAAC,EAAAI,KAAD,CAAMC,UAAU,OAAOC,GAAG,SAA1B,aACV,0BACGH,GACC,gBAAC,EAAAC,KAAD,CAAMC,UAAU,OAAOC,GAAIH,EAAKI,OAAOC,KAAMC,IAAI,QAC9CN,EAAKO,YAAYC,MADpB,WCAZ,EAzCyB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMX,EAA4B,EAA5BA,YAAaY,EAAe,EAAfA,SACvCC,EAAOF,EAAKG,IACZC,EAAYJ,EAAKK,KAAKC,aAAaP,MACnCQ,EAAWP,EAAKQ,QAAQC,MACxBC,EAAaH,EAASI,QAAO,SAAAC,GAChC,OAAOA,EAAKC,KAAKC,SAAS,YAAW,GAAGC,gBAG3C,OACE,gBAAC,IAAD,CAAQd,SAAUA,EAAUF,MAAOK,GACjC,gBAAC,IAAD,CACEL,MAAOG,EAAKJ,YAAYC,MACxBiB,YAAad,EAAKJ,YAAYkB,aAAed,EAAKe,UAGpD,gBAAC,KAAD,KACE,+BAEE,gBAAC,IAAD,KACE,gBAAC,EAAAC,EAAD,CACEC,MAAOT,EAAWU,gBAClBC,IAAKnB,EAAKJ,YAAYC,MACtBuB,MAAO,CAACC,UAAW,WAIvB,8BACE,0BAAKrB,EAAKJ,YAAYC,QAIxB,gBAAC,EAAAyB,YAAD,CAAaC,OAAQlB,GAAWL,EAAKwB,QAIzC,gBAAC,EAAD,CAAerC,YAAaA","file":"component---src-templates-work-post-js-865e1baf591270b467bc.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport { rhythm } from \"../utils/typography\"\nimport Container from \"./container\"\n\nconst StyledNav = styled.nav`\n  // padding: ${rhythm(2)} 0;\n  background: ${props => props.theme.bg2};\n`\n\nconst StyledHr = styled.div`\n  background: ${props => props.theme.bg4};\n  width: 100%;\n  height: 4px;\n  border-radius 2px;\n  margin-bottom: ${rhythm(2)};\n`\n\nconst StyledUl = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  margin: 0;\n\n  li {\n    list-style: none;\n  }\n`\nconst StyledLi = styled.li`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%)\n`\n\nconst PostFooterNav = ({pageContext}) => {\n\n  const { previous, next } = pageContext\n\n  return (\n\n    <StyledNav>\n      <Container>\n      {/*<StyledHr></StyledHr>*/}\n      <StyledUl>\n        <li>\n          {previous && (\n            <Link className=\"link\" to={previous.fields.slug} rel=\"prev\">\n              ← {previous.frontmatter.title}\n            </Link>\n          )}\n        </li>\n        <StyledLi><Link className=\"link\" to=\"/work\">All work</Link></StyledLi>\n        <li>\n          {next && (\n            <Link className=\"link\" to={next.fields.slug} rel=\"next\">\n              {next.frontmatter.title} →\n            </Link>\n          )}\n        </li>\n      </StyledUl>\n      </Container>\n    </StyledNav>\n  )\n}\n\nexport default PostFooterNav;","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport Layout from \"./layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nimport Container from \"../components/container\"\nimport WidthBleeder from \"../components/widthBleeder\"\nimport PostFooterNav from \"../components/postFooterNav\"\n\n\nconst WorkPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.mdx\n  const siteTitle = data.site.siteMetadata.title\n  const imgNodes = data.allFile.nodes\n  const coverImage = imgNodes.filter(node => \n    {return node.name.includes(\"cover\")})[0].childImageSharp\n\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n\n      <Container>\n        <article>\n\n          <WidthBleeder>\n            <GatsbyImage \n              image={coverImage.gatsbyImageData} \n              alt={post.frontmatter.title} \n              style={{maxHeight: '60vh'}}\n            />\n          </WidthBleeder>\n\n          <header>\n            <h1>{post.frontmatter.title}</h1>\n            {/*<p>{post.frontmatter.date}</p>*/}\n          </header>\n\n          <MDXRenderer images={imgNodes}>{post.body}</MDXRenderer>\n        </article>\n\n      </Container>\n      <PostFooterNav pageContext={pageContext} />\n\n\n    </Layout>\n  );\n}\nexport default WorkPostTemplate\n\nexport const pageQuery = graphql`query WorkPostBySlug($slug: String!) {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  mdx(fields: {slug: {eq: $slug}}) {\n    slug\n    id\n    excerpt(pruneLength: 160)\n    body\n    frontmatter {\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n      description\n    }\n  }\n  allFile(filter: {extension: {regex: \"/(jpg)|(jpeg)|(png)/\"}, relativeDirectory: {regex: $slug}}) {\n    nodes {\n      name\n      id\n      extension\n      childImageSharp {\n        gatsbyImageData(layout: FULL_WIDTH)\n        original {\n          src\n          height\n          width\n        }\n      }\n    }\n  }\n}\n`\n"],"sourceRoot":""}